"use client"

import { useEffect, useRef, useState } from "react"

interface FullWidthTextProps {
  children: string
  className?: string
  minFontSize?: number
  maxFontSize?: number
  fontFamily?: string
  fontWeight?: string | number
  lineHeight?: number
  allowWrap?: boolean
}

export default function FullWidthText({
  children,
  className = "",
  minFontSize = 16,
  maxFontSize = 120,
  fontFamily = "inherit",
  fontWeight = "bold",
  lineHeight = 0.9,
  allowWrap = false,
}: FullWidthTextProps) {
  const textRef = useRef<HTMLDivElement>(null)
  const [fontSize, setFontSize] = useState(minFontSize)
  const [isReady, setIsReady] = useState(false)

  useEffect(() => {
    const element = textRef.current
    if (!element) return

    const calculateFitSize = () => {
      // Wait for next tick to ensure DOM is ready
      setTimeout(() => {
        let container = element.parentElement
        
        // Find the content zone - look for element with specific width
        let attempts = 0
        while (container && attempts < 10) {
          const computedStyle = window.getComputedStyle(container)
          const width = container.clientWidth
          
          // Look for the main content container
          if (width > 200 && !container.style.fontSize) { // Skip font-size containers
            break
          }
          container = container.parentElement
          attempts++
        }
        
        if (!container) {
          console.warn('FullWidthText: Could not find suitable container')
          return
        }
        
        const containerWidth = container.clientWidth
        console.log('Container width:', containerWidth, 'for text:', children)
        
        if (containerWidth <= 0) {
          console.warn('FullWidthText: Container width is 0')
          return
        }

        // Create a temporary element for measurement
        const tempElement = document.createElement('div')
        tempElement.style.position = 'absolute'
        tempElement.style.visibility = 'hidden'
        tempElement.style.whiteSpace = allowWrap ? 'normal' : 'nowrap'
        tempElement.style.fontFamily = fontFamily
        tempElement.style.fontWeight = String(fontWeight)
        tempElement.style.lineHeight = String(lineHeight)
        tempElement.innerHTML = children
        document.body.appendChild(tempElement)

        // Binary search for best fit
        let low = minFontSize
        let high = maxFontSize
        let bestFit = minFontSize
        let iterations = 0
        const maxIterations = 50
        
        while (low <= high && iterations < maxIterations) {
          const mid = Math.floor((low + high) / 2)
          tempElement.style.fontSize = `${mid}px`
          
          const textWidth = tempElement.scrollWidth
          
          if (textWidth <= containerWidth) {
            bestFit = mid
            low = mid + 1
          } else {
            high = mid - 1
          }
          
          iterations++
        }
        
        document.body.removeChild(tempElement)
        
        console.log('Calculated font size:', bestFit, 'for container width:', containerWidth)
        setFontSize(bestFit)
        setIsReady(true)
      }, 10)
    }

    // Initial calculation
    calculateFitSize()

    // Recalculate on resize
    const resizeObserver = new ResizeObserver(() => {
      calculateFitSize()
    })
    
    // Observe the document body for any size changes
    resizeObserver.observe(document.body)

    return () => {
      resizeObserver.disconnect()
    }
  }, [children, minFontSize, maxFontSize, fontFamily, fontWeight, lineHeight, allowWrap])

  return (
    <div
      ref={textRef}
      className={`${className}`}
      style={{
        fontSize: `${fontSize}px`,
        fontFamily,
        fontWeight,
        lineHeight,
        width: "100%",
        whiteSpace: allowWrap ? "normal" : "nowrap",
        overflow: allowWrap ? "visible" : "hidden",
        textOverflow: allowWrap ? "clip" : "ellipsis",
        display: "block",
        opacity: isReady ? 1 : 0,
        transition: 'opacity 0.2s ease-in-out'
      }}
    >
      {children}
    </div>
  )
}
